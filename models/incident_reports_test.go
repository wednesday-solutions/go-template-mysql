// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIncidentReports(t *testing.T) {
	t.Parallel()

	query := IncidentReports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIncidentReportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncidentReportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IncidentReports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncidentReportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IncidentReportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncidentReportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IncidentReportExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IncidentReport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IncidentReportExists to return true, but got false.")
	}
}

func testIncidentReportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	incidentReportFound, err := FindIncidentReport(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if incidentReportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIncidentReportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IncidentReports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIncidentReportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IncidentReports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIncidentReportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incidentReportOne := &IncidentReport{}
	incidentReportTwo := &IncidentReport{}
	if err = randomize.Struct(seed, incidentReportOne, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}
	if err = randomize.Struct(seed, incidentReportTwo, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = incidentReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = incidentReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IncidentReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIncidentReportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	incidentReportOne := &IncidentReport{}
	incidentReportTwo := &IncidentReport{}
	if err = randomize.Struct(seed, incidentReportOne, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}
	if err = randomize.Struct(seed, incidentReportTwo, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = incidentReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = incidentReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testIncidentReportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncidentReportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(incidentReportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncidentReportToManyCaseStatuses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c CaseStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IncidentReportID = a.ID
	c.IncidentReportID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CaseStatuses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IncidentReportID == b.IncidentReportID {
			bFound = true
		}
		if v.IncidentReportID == c.IncidentReportID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IncidentReportSlice{&a}
	if err = a.L.LoadCaseStatuses(ctx, tx, false, (*[]*IncidentReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CaseStatuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CaseStatuses = nil
	if err = a.L.LoadCaseStatuses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CaseStatuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIncidentReportToManyIncidentReportAttachments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c IncidentReportAttachment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, incidentReportAttachmentDBTypes, false, incidentReportAttachmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, incidentReportAttachmentDBTypes, false, incidentReportAttachmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IncidentReportID = a.ID
	c.IncidentReportID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IncidentReportAttachments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IncidentReportID == b.IncidentReportID {
			bFound = true
		}
		if v.IncidentReportID == c.IncidentReportID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IncidentReportSlice{&a}
	if err = a.L.LoadIncidentReportAttachments(ctx, tx, false, (*[]*IncidentReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IncidentReportAttachments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IncidentReportAttachments = nil
	if err = a.L.LoadIncidentReportAttachments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IncidentReportAttachments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIncidentReportToManyNotices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c Notice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, noticeDBTypes, false, noticeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, noticeDBTypes, false, noticeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IncidentReportID = a.ID
	c.IncidentReportID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Notices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IncidentReportID == b.IncidentReportID {
			bFound = true
		}
		if v.IncidentReportID == c.IncidentReportID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IncidentReportSlice{&a}
	if err = a.L.LoadNotices(ctx, tx, false, (*[]*IncidentReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notices = nil
	if err = a.L.LoadNotices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIncidentReportToManyAddOpCaseStatuses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c, d, e CaseStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CaseStatus{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, caseStatusDBTypes, false, strmangle.SetComplement(caseStatusPrimaryKeyColumns, caseStatusColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CaseStatus{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCaseStatuses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IncidentReportID {
			t.Error("foreign key was wrong value", a.ID, first.IncidentReportID)
		}
		if a.ID != second.IncidentReportID {
			t.Error("foreign key was wrong value", a.ID, second.IncidentReportID)
		}

		if first.R.IncidentReport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IncidentReport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CaseStatuses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CaseStatuses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CaseStatuses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testIncidentReportToManyAddOpIncidentReportAttachments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c, d, e IncidentReportAttachment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReportAttachment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportAttachmentDBTypes, false, strmangle.SetComplement(incidentReportAttachmentPrimaryKeyColumns, incidentReportAttachmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IncidentReportAttachment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIncidentReportAttachments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IncidentReportID {
			t.Error("foreign key was wrong value", a.ID, first.IncidentReportID)
		}
		if a.ID != second.IncidentReportID {
			t.Error("foreign key was wrong value", a.ID, second.IncidentReportID)
		}

		if first.R.IncidentReport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IncidentReport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IncidentReportAttachments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IncidentReportAttachments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IncidentReportAttachments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testIncidentReportToManyAddOpNotices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c, d, e Notice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, noticeDBTypes, false, strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IncidentReportID {
			t.Error("foreign key was wrong value", a.ID, first.IncidentReportID)
		}
		if a.ID != second.IncidentReportID {
			t.Error("foreign key was wrong value", a.ID, second.IncidentReportID)
		}

		if first.R.IncidentReport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IncidentReport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Notices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testIncidentReportToOneEmployeeUsingCaseManager(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IncidentReport
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CaseManagerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CaseManager().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IncidentReportSlice{&local}
	if err = local.L.LoadCaseManager(ctx, tx, false, (*[]*IncidentReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CaseManager == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CaseManager = nil
	if err = local.L.LoadCaseManager(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CaseManager == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIncidentReportToOneEmployeeUsingEmployee(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IncidentReport
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EmployeeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Employee().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IncidentReportSlice{&local}
	if err = local.L.LoadEmployee(ctx, tx, false, (*[]*IncidentReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Employee == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Employee = nil
	if err = local.L.LoadEmployee(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Employee == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIncidentReportToOneEmployeeUsingLineManager(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IncidentReport
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LineManagerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LineManager().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IncidentReportSlice{&local}
	if err = local.L.LoadLineManager(ctx, tx, false, (*[]*IncidentReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineManager == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LineManager = nil
	if err = local.L.LoadLineManager(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineManager == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIncidentReportToOneSetOpEmployeeUsingCaseManager(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetCaseManager(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CaseManager != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CaseManagerIncidentReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CaseManagerID, x.ID) {
			t.Error("foreign key was wrong value", a.CaseManagerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CaseManagerID))
		reflect.Indirect(reflect.ValueOf(&a.CaseManagerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CaseManagerID, x.ID) {
			t.Error("foreign key was wrong value", a.CaseManagerID, x.ID)
		}
	}
}

func testIncidentReportToOneRemoveOpEmployeeUsingCaseManager(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCaseManager(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCaseManager(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CaseManager().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CaseManager != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CaseManagerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CaseManagerIncidentReports) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testIncidentReportToOneSetOpEmployeeUsingEmployee(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetEmployee(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Employee != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IncidentReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EmployeeID != x.ID {
			t.Error("foreign key was wrong value", a.EmployeeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EmployeeID))
		reflect.Indirect(reflect.ValueOf(&a.EmployeeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EmployeeID != x.ID {
			t.Error("foreign key was wrong value", a.EmployeeID, x.ID)
		}
	}
}
func testIncidentReportToOneSetOpEmployeeUsingLineManager(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetLineManager(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LineManager != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LineManagerIncidentReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LineManagerID, x.ID) {
			t.Error("foreign key was wrong value", a.LineManagerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LineManagerID))
		reflect.Indirect(reflect.ValueOf(&a.LineManagerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LineManagerID, x.ID) {
			t.Error("foreign key was wrong value", a.LineManagerID, x.ID)
		}
	}
}

func testIncidentReportToOneRemoveOpEmployeeUsingLineManager(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncidentReport
	var b Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLineManager(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLineManager(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LineManager().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LineManager != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LineManagerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.LineManagerIncidentReports) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testIncidentReportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIncidentReportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IncidentReportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIncidentReportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IncidentReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	incidentReportDBTypes = map[string]string{`ID`: `int`, `EmployeeID`: `int`, `CaseManagerID`: `int`, `LineManagerID`: `int`, `CoreSystemRiderID`: `int`, `IncidentDetails`: `text`, `IncidentDate`: `timestamp`, `EvidenceReceiptDate`: `timestamp`, `Remarks`: `text`, `Type`: `enum('MINOR','MAJOR')`, `URL`: `text`, `PreventiveSuspension`: `tinyint`, `DateOfAdministrativeHearing`: `timestamp`, `CaseFolder`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                     = bytes.MinRead
)

func testIncidentReportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(incidentReportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(incidentReportAllColumns) == len(incidentReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIncidentReportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(incidentReportAllColumns) == len(incidentReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IncidentReport{}
	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, incidentReportDBTypes, true, incidentReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(incidentReportAllColumns, incidentReportPrimaryKeyColumns) {
		fields = incidentReportAllColumns
	} else {
		fields = strmangle.SetComplement(
			incidentReportAllColumns,
			incidentReportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IncidentReportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIncidentReportsUpsert(t *testing.T) {
	t.Parallel()

	if len(incidentReportAllColumns) == len(incidentReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIncidentReportUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IncidentReport{}
	if err = randomize.Struct(seed, &o, incidentReportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IncidentReport: %s", err)
	}

	count, err := IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, incidentReportDBTypes, false, incidentReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IncidentReport: %s", err)
	}

	count, err = IncidentReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
