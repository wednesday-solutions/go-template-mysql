// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email              string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	EmployeeAccessRole null.String `boil:"employee_access_role" json:"employee_access_role,omitempty" toml:"employee_access_role" yaml:"employee_access_role,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt          null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	ID                 string
	Name               string
	Email              string
	EmployeeAccessRole string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	Name:               "name",
	Email:              "email",
	EmployeeAccessRole: "employee_access_role",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var EmployeeTableColumns = struct {
	ID                 string
	Name               string
	Email              string
	EmployeeAccessRole string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "employees.id",
	Name:               "employees.name",
	Email:              "employees.email",
	EmployeeAccessRole: "employees.employee_access_role",
	CreatedAt:          "employees.created_at",
	UpdatedAt:          "employees.updated_at",
	DeletedAt:          "employees.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EmployeeWhere = struct {
	ID                 whereHelperint
	Name               whereHelperstring
	Email              whereHelperstring
	EmployeeAccessRole whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpernull_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "`employees`.`id`"},
	Name:               whereHelperstring{field: "`employees`.`name`"},
	Email:              whereHelperstring{field: "`employees`.`email`"},
	EmployeeAccessRole: whereHelpernull_String{field: "`employees`.`employee_access_role`"},
	CreatedAt:          whereHelpertime_Time{field: "`employees`.`created_at`"},
	UpdatedAt:          whereHelpernull_Time{field: "`employees`.`updated_at`"},
	DeletedAt:          whereHelpernull_Time{field: "`employees`.`deleted_at`"},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	UserCaseStatuses           string
	CaseManagerIncidentReports string
	IncidentReports            string
	LineManagerIncidentReports string
}{
	UserCaseStatuses:           "UserCaseStatuses",
	CaseManagerIncidentReports: "CaseManagerIncidentReports",
	IncidentReports:            "IncidentReports",
	LineManagerIncidentReports: "LineManagerIncidentReports",
}

// employeeR is where relationships are stored.
type employeeR struct {
	UserCaseStatuses           CaseStatusSlice     `boil:"UserCaseStatuses" json:"UserCaseStatuses" toml:"UserCaseStatuses" yaml:"UserCaseStatuses"`
	CaseManagerIncidentReports IncidentReportSlice `boil:"CaseManagerIncidentReports" json:"CaseManagerIncidentReports" toml:"CaseManagerIncidentReports" yaml:"CaseManagerIncidentReports"`
	IncidentReports            IncidentReportSlice `boil:"IncidentReports" json:"IncidentReports" toml:"IncidentReports" yaml:"IncidentReports"`
	LineManagerIncidentReports IncidentReportSlice `boil:"LineManagerIncidentReports" json:"LineManagerIncidentReports" toml:"LineManagerIncidentReports" yaml:"LineManagerIncidentReports"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

func (r *employeeR) GetUserCaseStatuses() CaseStatusSlice {
	if r == nil {
		return nil
	}
	return r.UserCaseStatuses
}

func (r *employeeR) GetCaseManagerIncidentReports() IncidentReportSlice {
	if r == nil {
		return nil
	}
	return r.CaseManagerIncidentReports
}

func (r *employeeR) GetIncidentReports() IncidentReportSlice {
	if r == nil {
		return nil
	}
	return r.IncidentReports
}

func (r *employeeR) GetLineManagerIncidentReports() IncidentReportSlice {
	if r == nil {
		return nil
	}
	return r.LineManagerIncidentReports
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"id", "name", "email", "employee_access_role", "created_at", "updated_at", "deleted_at"}
	employeeColumnsWithoutDefault = []string{"name", "email", "updated_at", "deleted_at"}
	employeeColumnsWithDefault    = []string{"id", "employee_access_role", "created_at"}
	employeePrimaryKeyColumns     = []string{"id"}
	employeeGeneratedColumns      = []string{}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should almost always be used instead of []Employee.
	EmployeeSlice []*Employee

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for employees")
	}

	return o, nil
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employee slice")
	}

	return o, nil
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count employees rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if employees exists")
	}

	return count > 0, nil
}

// UserCaseStatuses retrieves all the case_status's CaseStatuses with an executor via user_id column.
func (o *Employee) UserCaseStatuses(mods ...qm.QueryMod) caseStatusQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`case_status`.`user_id`=?", o.ID),
	)

	return CaseStatuses(queryMods...)
}

// CaseManagerIncidentReports retrieves all the incident_report's IncidentReports with an executor via case_manager_id column.
func (o *Employee) CaseManagerIncidentReports(mods ...qm.QueryMod) incidentReportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`incident_reports`.`case_manager_id`=?", o.ID),
	)

	return IncidentReports(queryMods...)
}

// IncidentReports retrieves all the incident_report's IncidentReports with an executor.
func (o *Employee) IncidentReports(mods ...qm.QueryMod) incidentReportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`incident_reports`.`employee_id`=?", o.ID),
	)

	return IncidentReports(queryMods...)
}

// LineManagerIncidentReports retrieves all the incident_report's IncidentReports with an executor via line_manager_id column.
func (o *Employee) LineManagerIncidentReports(mods ...qm.QueryMod) incidentReportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`incident_reports`.`line_manager_id`=?", o.ID),
	)

	return IncidentReports(queryMods...)
}

// LoadUserCaseStatuses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadUserCaseStatuses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`case_status`),
		qm.WhereIn(`case_status.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load case_status")
	}

	var resultSlice []*CaseStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice case_status")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on case_status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for case_status")
	}

	if singular {
		object.R.UserCaseStatuses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &caseStatusR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserCaseStatuses = append(local.R.UserCaseStatuses, foreign)
				if foreign.R == nil {
					foreign.R = &caseStatusR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadCaseManagerIncidentReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadCaseManagerIncidentReports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`incident_reports`),
		qm.WhereIn(`incident_reports.case_manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load incident_reports")
	}

	var resultSlice []*IncidentReport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice incident_reports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on incident_reports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incident_reports")
	}

	if singular {
		object.R.CaseManagerIncidentReports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &incidentReportR{}
			}
			foreign.R.CaseManager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CaseManagerID) {
				local.R.CaseManagerIncidentReports = append(local.R.CaseManagerIncidentReports, foreign)
				if foreign.R == nil {
					foreign.R = &incidentReportR{}
				}
				foreign.R.CaseManager = local
				break
			}
		}
	}

	return nil
}

// LoadIncidentReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadIncidentReports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`incident_reports`),
		qm.WhereIn(`incident_reports.employee_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load incident_reports")
	}

	var resultSlice []*IncidentReport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice incident_reports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on incident_reports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incident_reports")
	}

	if singular {
		object.R.IncidentReports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &incidentReportR{}
			}
			foreign.R.Employee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EmployeeID {
				local.R.IncidentReports = append(local.R.IncidentReports, foreign)
				if foreign.R == nil {
					foreign.R = &incidentReportR{}
				}
				foreign.R.Employee = local
				break
			}
		}
	}

	return nil
}

// LoadLineManagerIncidentReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadLineManagerIncidentReports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`incident_reports`),
		qm.WhereIn(`incident_reports.line_manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load incident_reports")
	}

	var resultSlice []*IncidentReport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice incident_reports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on incident_reports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incident_reports")
	}

	if singular {
		object.R.LineManagerIncidentReports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &incidentReportR{}
			}
			foreign.R.LineManager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LineManagerID) {
				local.R.LineManagerIncidentReports = append(local.R.LineManagerIncidentReports, foreign)
				if foreign.R == nil {
					foreign.R = &incidentReportR{}
				}
				foreign.R.LineManager = local
				break
			}
		}
	}

	return nil
}

// AddUserCaseStatuses adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.UserCaseStatuses.
// Sets related.R.User appropriately.
func (o *Employee) AddUserCaseStatuses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaseStatus) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `case_status` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, caseStatusPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			UserCaseStatuses: related,
		}
	} else {
		o.R.UserCaseStatuses = append(o.R.UserCaseStatuses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &caseStatusR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddCaseManagerIncidentReports adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.CaseManagerIncidentReports.
// Sets related.R.CaseManager appropriately.
func (o *Employee) AddCaseManagerIncidentReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncidentReport) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CaseManagerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `incident_reports` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"case_manager_id"}),
				strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CaseManagerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			CaseManagerIncidentReports: related,
		}
	} else {
		o.R.CaseManagerIncidentReports = append(o.R.CaseManagerIncidentReports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incidentReportR{
				CaseManager: o,
			}
		} else {
			rel.R.CaseManager = o
		}
	}
	return nil
}

// SetCaseManagerIncidentReports removes all previously related items of the
// employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CaseManager's CaseManagerIncidentReports accordingly.
// Replaces o.R.CaseManagerIncidentReports with related.
// Sets related.R.CaseManager's CaseManagerIncidentReports accordingly.
func (o *Employee) SetCaseManagerIncidentReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncidentReport) error {
	query := "update `incident_reports` set `case_manager_id` = null where `case_manager_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CaseManagerIncidentReports {
			queries.SetScanner(&rel.CaseManagerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CaseManager = nil
		}
		o.R.CaseManagerIncidentReports = nil
	}

	return o.AddCaseManagerIncidentReports(ctx, exec, insert, related...)
}

// RemoveCaseManagerIncidentReports relationships from objects passed in.
// Removes related items from R.CaseManagerIncidentReports (uses pointer comparison, removal does not keep order)
// Sets related.R.CaseManager.
func (o *Employee) RemoveCaseManagerIncidentReports(ctx context.Context, exec boil.ContextExecutor, related ...*IncidentReport) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CaseManagerID, nil)
		if rel.R != nil {
			rel.R.CaseManager = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("case_manager_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CaseManagerIncidentReports {
			if rel != ri {
				continue
			}

			ln := len(o.R.CaseManagerIncidentReports)
			if ln > 1 && i < ln-1 {
				o.R.CaseManagerIncidentReports[i] = o.R.CaseManagerIncidentReports[ln-1]
			}
			o.R.CaseManagerIncidentReports = o.R.CaseManagerIncidentReports[:ln-1]
			break
		}
	}

	return nil
}

// AddIncidentReports adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.IncidentReports.
// Sets related.R.Employee appropriately.
func (o *Employee) AddIncidentReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncidentReport) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmployeeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `incident_reports` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"employee_id"}),
				strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmployeeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			IncidentReports: related,
		}
	} else {
		o.R.IncidentReports = append(o.R.IncidentReports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incidentReportR{
				Employee: o,
			}
		} else {
			rel.R.Employee = o
		}
	}
	return nil
}

// AddLineManagerIncidentReports adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.LineManagerIncidentReports.
// Sets related.R.LineManager appropriately.
func (o *Employee) AddLineManagerIncidentReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncidentReport) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LineManagerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `incident_reports` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"line_manager_id"}),
				strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LineManagerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			LineManagerIncidentReports: related,
		}
	} else {
		o.R.LineManagerIncidentReports = append(o.R.LineManagerIncidentReports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incidentReportR{
				LineManager: o,
			}
		} else {
			rel.R.LineManager = o
		}
	}
	return nil
}

// SetLineManagerIncidentReports removes all previously related items of the
// employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LineManager's LineManagerIncidentReports accordingly.
// Replaces o.R.LineManagerIncidentReports with related.
// Sets related.R.LineManager's LineManagerIncidentReports accordingly.
func (o *Employee) SetLineManagerIncidentReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncidentReport) error {
	query := "update `incident_reports` set `line_manager_id` = null where `line_manager_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LineManagerIncidentReports {
			queries.SetScanner(&rel.LineManagerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LineManager = nil
		}
		o.R.LineManagerIncidentReports = nil
	}

	return o.AddLineManagerIncidentReports(ctx, exec, insert, related...)
}

// RemoveLineManagerIncidentReports relationships from objects passed in.
// Removes related items from R.LineManagerIncidentReports (uses pointer comparison, removal does not keep order)
// Sets related.R.LineManager.
func (o *Employee) RemoveLineManagerIncidentReports(ctx context.Context, exec boil.ContextExecutor, related ...*IncidentReport) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LineManagerID, nil)
		if rel.R != nil {
			rel.R.LineManager = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("line_manager_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LineManagerIncidentReports {
			if rel != ri {
				continue
			}

			ln := len(o.R.LineManagerIncidentReports)
			if ln > 1 && i < ln-1 {
				o.R.LineManagerIncidentReports[i] = o.R.LineManagerIncidentReports[ln-1]
			}
			o.R.LineManagerIncidentReports = o.R.LineManagerIncidentReports[:ln-1]
			break
		}
	}

	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("`employees`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`employees`.*"})
	}

	return employeeQuery{q}
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `employees` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from employees")
	}

	return employeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employees provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `employees` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `employees` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `employees` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into employees")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == employeeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for employees")
	}

CacheNoHooks:
	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update employees, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `employees` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update employees row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for employees")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for employees")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `employees` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

var mySQLEmployeeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employees provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEmployeeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert employees, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`employees`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `employees` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for employees")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == employeeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(employeeType, employeeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for employees")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for employees")
	}

CacheNoHooks:
	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employee provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM `employees` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for employees")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employees")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `employees` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employees")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `employees`.* FROM `employees` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `employees` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if employees exists")
	}

	return exists, nil
}
