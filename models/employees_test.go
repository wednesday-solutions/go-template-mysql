// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEmployees(t *testing.T) {
	t.Parallel()

	query := Employees()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEmployeesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmployeesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Employees().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmployeesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EmployeeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmployeesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EmployeeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Employee exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EmployeeExists to return true, but got false.")
	}
}

func testEmployeesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	employeeFound, err := FindEmployee(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if employeeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEmployeesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Employees().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEmployeesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Employees().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEmployeesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	employeeOne := &Employee{}
	employeeTwo := &Employee{}
	if err = randomize.Struct(seed, employeeOne, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}
	if err = randomize.Struct(seed, employeeTwo, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = employeeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = employeeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Employees().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEmployeesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	employeeOne := &Employee{}
	employeeTwo := &Employee{}
	if err = randomize.Struct(seed, employeeOne, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}
	if err = randomize.Struct(seed, employeeTwo, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = employeeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = employeeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testEmployeesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmployeesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(employeeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmployeeToManyUserCaseStatuses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c CaseStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.ID
	c.UserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserCaseStatuses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployeeSlice{&a}
	if err = a.L.LoadUserCaseStatuses(ctx, tx, false, (*[]*Employee)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserCaseStatuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserCaseStatuses = nil
	if err = a.L.LoadUserCaseStatuses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserCaseStatuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployeeToManyCaseManagerIncidentReports(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CaseManagerID, a.ID)
	queries.Assign(&c.CaseManagerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CaseManagerIncidentReports().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CaseManagerID, b.CaseManagerID) {
			bFound = true
		}
		if queries.Equal(v.CaseManagerID, c.CaseManagerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployeeSlice{&a}
	if err = a.L.LoadCaseManagerIncidentReports(ctx, tx, false, (*[]*Employee)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CaseManagerIncidentReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CaseManagerIncidentReports = nil
	if err = a.L.LoadCaseManagerIncidentReports(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CaseManagerIncidentReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployeeToManyIncidentReports(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EmployeeID = a.ID
	c.EmployeeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IncidentReports().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EmployeeID == b.EmployeeID {
			bFound = true
		}
		if v.EmployeeID == c.EmployeeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployeeSlice{&a}
	if err = a.L.LoadIncidentReports(ctx, tx, false, (*[]*Employee)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IncidentReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IncidentReports = nil
	if err = a.L.LoadIncidentReports(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IncidentReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployeeToManyLineManagerIncidentReports(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LineManagerID, a.ID)
	queries.Assign(&c.LineManagerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LineManagerIncidentReports().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LineManagerID, b.LineManagerID) {
			bFound = true
		}
		if queries.Equal(v.LineManagerID, c.LineManagerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployeeSlice{&a}
	if err = a.L.LoadLineManagerIncidentReports(ctx, tx, false, (*[]*Employee)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineManagerIncidentReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LineManagerIncidentReports = nil
	if err = a.L.LoadLineManagerIncidentReports(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineManagerIncidentReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployeeToManyAddOpUserCaseStatuses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e CaseStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CaseStatus{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, caseStatusDBTypes, false, strmangle.SetComplement(caseStatusPrimaryKeyColumns, caseStatusColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CaseStatus{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserCaseStatuses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UserID {
			t.Error("foreign key was wrong value", a.ID, first.UserID)
		}
		if a.ID != second.UserID {
			t.Error("foreign key was wrong value", a.ID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserCaseStatuses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserCaseStatuses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserCaseStatuses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEmployeeToManyAddOpCaseManagerIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IncidentReport{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCaseManagerIncidentReports(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CaseManagerID) {
			t.Error("foreign key was wrong value", a.ID, first.CaseManagerID)
		}
		if !queries.Equal(a.ID, second.CaseManagerID) {
			t.Error("foreign key was wrong value", a.ID, second.CaseManagerID)
		}

		if first.R.CaseManager != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CaseManager != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CaseManagerIncidentReports[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CaseManagerIncidentReports[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CaseManagerIncidentReports().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEmployeeToManySetOpCaseManagerIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCaseManagerIncidentReports(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CaseManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCaseManagerIncidentReports(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CaseManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CaseManagerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CaseManagerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CaseManagerID) {
		t.Error("foreign key was wrong value", a.ID, d.CaseManagerID)
	}
	if !queries.Equal(a.ID, e.CaseManagerID) {
		t.Error("foreign key was wrong value", a.ID, e.CaseManagerID)
	}

	if b.R.CaseManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CaseManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CaseManager != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CaseManager != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CaseManagerIncidentReports[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CaseManagerIncidentReports[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testEmployeeToManyRemoveOpCaseManagerIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCaseManagerIncidentReports(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CaseManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCaseManagerIncidentReports(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CaseManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CaseManagerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CaseManagerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CaseManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CaseManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CaseManager != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CaseManager != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CaseManagerIncidentReports) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CaseManagerIncidentReports[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CaseManagerIncidentReports[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testEmployeeToManyAddOpIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IncidentReport{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIncidentReports(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EmployeeID {
			t.Error("foreign key was wrong value", a.ID, first.EmployeeID)
		}
		if a.ID != second.EmployeeID {
			t.Error("foreign key was wrong value", a.ID, second.EmployeeID)
		}

		if first.R.Employee != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Employee != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IncidentReports[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IncidentReports[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IncidentReports().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEmployeeToManyAddOpLineManagerIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IncidentReport{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLineManagerIncidentReports(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LineManagerID) {
			t.Error("foreign key was wrong value", a.ID, first.LineManagerID)
		}
		if !queries.Equal(a.ID, second.LineManagerID) {
			t.Error("foreign key was wrong value", a.ID, second.LineManagerID)
		}

		if first.R.LineManager != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LineManager != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LineManagerIncidentReports[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LineManagerIncidentReports[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LineManagerIncidentReports().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEmployeeToManySetOpLineManagerIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLineManagerIncidentReports(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LineManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLineManagerIncidentReports(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LineManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LineManagerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LineManagerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LineManagerID) {
		t.Error("foreign key was wrong value", a.ID, d.LineManagerID)
	}
	if !queries.Equal(a.ID, e.LineManagerID) {
		t.Error("foreign key was wrong value", a.ID, e.LineManagerID)
	}

	if b.R.LineManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LineManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LineManager != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.LineManager != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.LineManagerIncidentReports[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.LineManagerIncidentReports[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testEmployeeToManyRemoveOpLineManagerIncidentReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employee
	var b, c, d, e IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IncidentReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLineManagerIncidentReports(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LineManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLineManagerIncidentReports(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LineManagerIncidentReports().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LineManagerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LineManagerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.LineManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LineManager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LineManager != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.LineManager != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.LineManagerIncidentReports) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.LineManagerIncidentReports[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.LineManagerIncidentReports[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testEmployeesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEmployeesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EmployeeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEmployeesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Employees().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	employeeDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Email`: `varchar`, `EmployeeAccessRole`: `enum('EMPLOYEE','CASE_MANAGER','LINE_MANAGER','SUPER')`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_               = bytes.MinRead
)

func testEmployeesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(employeePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(employeeAllColumns) == len(employeePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEmployeesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(employeeAllColumns) == len(employeePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Employee{}
	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, employeeDBTypes, true, employeePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(employeeAllColumns, employeePrimaryKeyColumns) {
		fields = employeeAllColumns
	} else {
		fields = strmangle.SetComplement(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EmployeeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEmployeesUpsert(t *testing.T) {
	t.Parallel()

	if len(employeeAllColumns) == len(employeePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEmployeeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Employee{}
	if err = randomize.Struct(seed, &o, employeeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Employee: %s", err)
	}

	count, err := Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, employeeDBTypes, false, employeePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Employee: %s", err)
	}

	count, err = Employees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
