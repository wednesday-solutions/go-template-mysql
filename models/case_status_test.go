// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCaseStatuses(t *testing.T) {
	t.Parallel()

	query := CaseStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCaseStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCaseStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CaseStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCaseStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CaseStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCaseStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CaseStatusExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CaseStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CaseStatusExists to return true, but got false.")
	}
}

func testCaseStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	caseStatusFound, err := FindCaseStatus(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if caseStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCaseStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CaseStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCaseStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CaseStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCaseStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	caseStatusOne := &CaseStatus{}
	caseStatusTwo := &CaseStatus{}
	if err = randomize.Struct(seed, caseStatusOne, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, caseStatusTwo, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = caseStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = caseStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CaseStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCaseStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	caseStatusOne := &CaseStatus{}
	caseStatusTwo := &CaseStatus{}
	if err = randomize.Struct(seed, caseStatusOne, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, caseStatusTwo, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = caseStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = caseStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCaseStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCaseStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(caseStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCaseStatusToOneIncidentReportUsingIncidentReport(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CaseStatus
	var foreign IncidentReport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, incidentReportDBTypes, false, incidentReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncidentReport struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IncidentReportID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IncidentReport().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CaseStatusSlice{&local}
	if err = local.L.LoadIncidentReport(ctx, tx, false, (*[]*CaseStatus)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IncidentReport == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IncidentReport = nil
	if err = local.L.LoadIncidentReport(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IncidentReport == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCaseStatusToOneEmployeeUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CaseStatus
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, caseStatusDBTypes, false, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CaseStatusSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CaseStatus)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCaseStatusToOneSetOpIncidentReportUsingIncidentReport(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CaseStatus
	var b, c IncidentReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, caseStatusDBTypes, false, strmangle.SetComplement(caseStatusPrimaryKeyColumns, caseStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, incidentReportDBTypes, false, strmangle.SetComplement(incidentReportPrimaryKeyColumns, incidentReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*IncidentReport{&b, &c} {
		err = a.SetIncidentReport(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IncidentReport != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CaseStatuses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IncidentReportID != x.ID {
			t.Error("foreign key was wrong value", a.IncidentReportID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IncidentReportID))
		reflect.Indirect(reflect.ValueOf(&a.IncidentReportID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IncidentReportID != x.ID {
			t.Error("foreign key was wrong value", a.IncidentReportID, x.ID)
		}
	}
}
func testCaseStatusToOneSetOpEmployeeUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CaseStatus
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, caseStatusDBTypes, false, strmangle.SetComplement(caseStatusPrimaryKeyColumns, caseStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserCaseStatuses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCaseStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCaseStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CaseStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCaseStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CaseStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	caseStatusDBTypes = map[string]string{`ID`: `int`, `IncidentReportID`: `int`, `Status`: `enum('FILED','CASE_MANAGER_ASSIGNED','VALID_BY_CASE_MANAGER','INCOMPLETE_EVIDENCE','NO_DISCIPLINARY_CASE','LINE_MANAGER_ASSIGNED','VALID_BY_LINE_MANAGER','NTE_DRAFTED','NTE_ISSUED','RIDER_RESPONSE','ADMIN_HEARING','NOD_DRAFTED','NOD_ISSUED','NOW_DRAFTED','NOW_ISSUED')`, `StatusRemarks`: `text`, `UserID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testCaseStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(caseStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(caseStatusAllColumns) == len(caseStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCaseStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(caseStatusAllColumns) == len(caseStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CaseStatus{}
	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, caseStatusDBTypes, true, caseStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(caseStatusAllColumns, caseStatusPrimaryKeyColumns) {
		fields = caseStatusAllColumns
	} else {
		fields = strmangle.SetComplement(
			caseStatusAllColumns,
			caseStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CaseStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCaseStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(caseStatusAllColumns) == len(caseStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCaseStatusUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CaseStatus{}
	if err = randomize.Struct(seed, &o, caseStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CaseStatus: %s", err)
	}

	count, err := CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, caseStatusDBTypes, false, caseStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CaseStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CaseStatus: %s", err)
	}

	count, err = CaseStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
