// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IncidentReport is an object representing the database table.
type IncidentReport struct {
	ID                          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	EmployeeID                  int         `boil:"employee_id" json:"employee_id" toml:"employee_id" yaml:"employee_id"`
	CaseManagerID               null.Int    `boil:"case_manager_id" json:"case_manager_id,omitempty" toml:"case_manager_id" yaml:"case_manager_id,omitempty"`
	LineManagerID               null.Int    `boil:"line_manager_id" json:"line_manager_id,omitempty" toml:"line_manager_id" yaml:"line_manager_id,omitempty"`
	CoreSystemRiderID           int         `boil:"core_system_rider_id" json:"core_system_rider_id" toml:"core_system_rider_id" yaml:"core_system_rider_id"`
	IncidentDetails             string      `boil:"incident_details" json:"incident_details" toml:"incident_details" yaml:"incident_details"`
	IncidentDate                time.Time   `boil:"incident_date" json:"incident_date" toml:"incident_date" yaml:"incident_date"`
	EvidenceReceiptDate         null.Time   `boil:"evidence_receipt_date" json:"evidence_receipt_date,omitempty" toml:"evidence_receipt_date" yaml:"evidence_receipt_date,omitempty"`
	Remarks                     null.String `boil:"remarks" json:"remarks,omitempty" toml:"remarks" yaml:"remarks,omitempty"`
	Type                        null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	URL                         null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	PreventiveSuspension        null.Bool   `boil:"preventive_suspension" json:"preventive_suspension,omitempty" toml:"preventive_suspension" yaml:"preventive_suspension,omitempty"`
	DateOfAdministrativeHearing null.Time   `boil:"date_of_administrative_hearing" json:"date_of_administrative_hearing,omitempty" toml:"date_of_administrative_hearing" yaml:"date_of_administrative_hearing,omitempty"`
	CaseFolder                  null.String `boil:"case_folder" json:"case_folder,omitempty" toml:"case_folder" yaml:"case_folder,omitempty"`
	CreatedAt                   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt                   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *incidentReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L incidentReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IncidentReportColumns = struct {
	ID                          string
	EmployeeID                  string
	CaseManagerID               string
	LineManagerID               string
	CoreSystemRiderID           string
	IncidentDetails             string
	IncidentDate                string
	EvidenceReceiptDate         string
	Remarks                     string
	Type                        string
	URL                         string
	PreventiveSuspension        string
	DateOfAdministrativeHearing string
	CaseFolder                  string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
}{
	ID:                          "id",
	EmployeeID:                  "employee_id",
	CaseManagerID:               "case_manager_id",
	LineManagerID:               "line_manager_id",
	CoreSystemRiderID:           "core_system_rider_id",
	IncidentDetails:             "incident_details",
	IncidentDate:                "incident_date",
	EvidenceReceiptDate:         "evidence_receipt_date",
	Remarks:                     "remarks",
	Type:                        "type",
	URL:                         "url",
	PreventiveSuspension:        "preventive_suspension",
	DateOfAdministrativeHearing: "date_of_administrative_hearing",
	CaseFolder:                  "case_folder",
	CreatedAt:                   "created_at",
	UpdatedAt:                   "updated_at",
	DeletedAt:                   "deleted_at",
}

var IncidentReportTableColumns = struct {
	ID                          string
	EmployeeID                  string
	CaseManagerID               string
	LineManagerID               string
	CoreSystemRiderID           string
	IncidentDetails             string
	IncidentDate                string
	EvidenceReceiptDate         string
	Remarks                     string
	Type                        string
	URL                         string
	PreventiveSuspension        string
	DateOfAdministrativeHearing string
	CaseFolder                  string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
}{
	ID:                          "incident_reports.id",
	EmployeeID:                  "incident_reports.employee_id",
	CaseManagerID:               "incident_reports.case_manager_id",
	LineManagerID:               "incident_reports.line_manager_id",
	CoreSystemRiderID:           "incident_reports.core_system_rider_id",
	IncidentDetails:             "incident_reports.incident_details",
	IncidentDate:                "incident_reports.incident_date",
	EvidenceReceiptDate:         "incident_reports.evidence_receipt_date",
	Remarks:                     "incident_reports.remarks",
	Type:                        "incident_reports.type",
	URL:                         "incident_reports.url",
	PreventiveSuspension:        "incident_reports.preventive_suspension",
	DateOfAdministrativeHearing: "incident_reports.date_of_administrative_hearing",
	CaseFolder:                  "incident_reports.case_folder",
	CreatedAt:                   "incident_reports.created_at",
	UpdatedAt:                   "incident_reports.updated_at",
	DeletedAt:                   "incident_reports.deleted_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var IncidentReportWhere = struct {
	ID                          whereHelperint
	EmployeeID                  whereHelperint
	CaseManagerID               whereHelpernull_Int
	LineManagerID               whereHelpernull_Int
	CoreSystemRiderID           whereHelperint
	IncidentDetails             whereHelperstring
	IncidentDate                whereHelpertime_Time
	EvidenceReceiptDate         whereHelpernull_Time
	Remarks                     whereHelpernull_String
	Type                        whereHelpernull_String
	URL                         whereHelpernull_String
	PreventiveSuspension        whereHelpernull_Bool
	DateOfAdministrativeHearing whereHelpernull_Time
	CaseFolder                  whereHelpernull_String
	CreatedAt                   whereHelpertime_Time
	UpdatedAt                   whereHelpernull_Time
	DeletedAt                   whereHelpernull_Time
}{
	ID:                          whereHelperint{field: "`incident_reports`.`id`"},
	EmployeeID:                  whereHelperint{field: "`incident_reports`.`employee_id`"},
	CaseManagerID:               whereHelpernull_Int{field: "`incident_reports`.`case_manager_id`"},
	LineManagerID:               whereHelpernull_Int{field: "`incident_reports`.`line_manager_id`"},
	CoreSystemRiderID:           whereHelperint{field: "`incident_reports`.`core_system_rider_id`"},
	IncidentDetails:             whereHelperstring{field: "`incident_reports`.`incident_details`"},
	IncidentDate:                whereHelpertime_Time{field: "`incident_reports`.`incident_date`"},
	EvidenceReceiptDate:         whereHelpernull_Time{field: "`incident_reports`.`evidence_receipt_date`"},
	Remarks:                     whereHelpernull_String{field: "`incident_reports`.`remarks`"},
	Type:                        whereHelpernull_String{field: "`incident_reports`.`type`"},
	URL:                         whereHelpernull_String{field: "`incident_reports`.`url`"},
	PreventiveSuspension:        whereHelpernull_Bool{field: "`incident_reports`.`preventive_suspension`"},
	DateOfAdministrativeHearing: whereHelpernull_Time{field: "`incident_reports`.`date_of_administrative_hearing`"},
	CaseFolder:                  whereHelpernull_String{field: "`incident_reports`.`case_folder`"},
	CreatedAt:                   whereHelpertime_Time{field: "`incident_reports`.`created_at`"},
	UpdatedAt:                   whereHelpernull_Time{field: "`incident_reports`.`updated_at`"},
	DeletedAt:                   whereHelpernull_Time{field: "`incident_reports`.`deleted_at`"},
}

// IncidentReportRels is where relationship names are stored.
var IncidentReportRels = struct {
	CaseManager               string
	Employee                  string
	LineManager               string
	CaseStatuses              string
	IncidentReportAttachments string
	Notices                   string
}{
	CaseManager:               "CaseManager",
	Employee:                  "Employee",
	LineManager:               "LineManager",
	CaseStatuses:              "CaseStatuses",
	IncidentReportAttachments: "IncidentReportAttachments",
	Notices:                   "Notices",
}

// incidentReportR is where relationships are stored.
type incidentReportR struct {
	CaseManager               *Employee                     `boil:"CaseManager" json:"CaseManager" toml:"CaseManager" yaml:"CaseManager"`
	Employee                  *Employee                     `boil:"Employee" json:"Employee" toml:"Employee" yaml:"Employee"`
	LineManager               *Employee                     `boil:"LineManager" json:"LineManager" toml:"LineManager" yaml:"LineManager"`
	CaseStatuses              CaseStatusSlice               `boil:"CaseStatuses" json:"CaseStatuses" toml:"CaseStatuses" yaml:"CaseStatuses"`
	IncidentReportAttachments IncidentReportAttachmentSlice `boil:"IncidentReportAttachments" json:"IncidentReportAttachments" toml:"IncidentReportAttachments" yaml:"IncidentReportAttachments"`
	Notices                   NoticeSlice                   `boil:"Notices" json:"Notices" toml:"Notices" yaml:"Notices"`
}

// NewStruct creates a new relationship struct
func (*incidentReportR) NewStruct() *incidentReportR {
	return &incidentReportR{}
}

func (r *incidentReportR) GetCaseManager() *Employee {
	if r == nil {
		return nil
	}
	return r.CaseManager
}

func (r *incidentReportR) GetEmployee() *Employee {
	if r == nil {
		return nil
	}
	return r.Employee
}

func (r *incidentReportR) GetLineManager() *Employee {
	if r == nil {
		return nil
	}
	return r.LineManager
}

func (r *incidentReportR) GetCaseStatuses() CaseStatusSlice {
	if r == nil {
		return nil
	}
	return r.CaseStatuses
}

func (r *incidentReportR) GetIncidentReportAttachments() IncidentReportAttachmentSlice {
	if r == nil {
		return nil
	}
	return r.IncidentReportAttachments
}

func (r *incidentReportR) GetNotices() NoticeSlice {
	if r == nil {
		return nil
	}
	return r.Notices
}

// incidentReportL is where Load methods for each relationship are stored.
type incidentReportL struct{}

var (
	incidentReportAllColumns            = []string{"id", "employee_id", "case_manager_id", "line_manager_id", "core_system_rider_id", "incident_details", "incident_date", "evidence_receipt_date", "remarks", "type", "url", "preventive_suspension", "date_of_administrative_hearing", "case_folder", "created_at", "updated_at", "deleted_at"}
	incidentReportColumnsWithoutDefault = []string{"employee_id", "case_manager_id", "line_manager_id", "core_system_rider_id", "incident_details", "incident_date", "evidence_receipt_date", "remarks", "type", "url", "preventive_suspension", "date_of_administrative_hearing", "case_folder", "updated_at", "deleted_at"}
	incidentReportColumnsWithDefault    = []string{"id", "created_at"}
	incidentReportPrimaryKeyColumns     = []string{"id"}
	incidentReportGeneratedColumns      = []string{}
)

type (
	// IncidentReportSlice is an alias for a slice of pointers to IncidentReport.
	// This should almost always be used instead of []IncidentReport.
	IncidentReportSlice []*IncidentReport

	incidentReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	incidentReportType                 = reflect.TypeOf(&IncidentReport{})
	incidentReportMapping              = queries.MakeStructMapping(incidentReportType)
	incidentReportPrimaryKeyMapping, _ = queries.BindMapping(incidentReportType, incidentReportMapping, incidentReportPrimaryKeyColumns)
	incidentReportInsertCacheMut       sync.RWMutex
	incidentReportInsertCache          = make(map[string]insertCache)
	incidentReportUpdateCacheMut       sync.RWMutex
	incidentReportUpdateCache          = make(map[string]updateCache)
	incidentReportUpsertCacheMut       sync.RWMutex
	incidentReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single incidentReport record from the query.
func (q incidentReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IncidentReport, error) {
	o := &IncidentReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for incident_reports")
	}

	return o, nil
}

// All returns all IncidentReport records from the query.
func (q incidentReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (IncidentReportSlice, error) {
	var o []*IncidentReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IncidentReport slice")
	}

	return o, nil
}

// Count returns the count of all IncidentReport records in the query.
func (q incidentReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count incident_reports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q incidentReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if incident_reports exists")
	}

	return count > 0, nil
}

// CaseManager pointed to by the foreign key.
func (o *IncidentReport) CaseManager(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CaseManagerID),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// Employee pointed to by the foreign key.
func (o *IncidentReport) Employee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EmployeeID),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// LineManager pointed to by the foreign key.
func (o *IncidentReport) LineManager(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.LineManagerID),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// CaseStatuses retrieves all the case_status's CaseStatuses with an executor.
func (o *IncidentReport) CaseStatuses(mods ...qm.QueryMod) caseStatusQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`case_status`.`incident_report_id`=?", o.ID),
	)

	return CaseStatuses(queryMods...)
}

// IncidentReportAttachments retrieves all the incident_report_attachment's IncidentReportAttachments with an executor.
func (o *IncidentReport) IncidentReportAttachments(mods ...qm.QueryMod) incidentReportAttachmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`incident_report_attachments`.`incident_report_id`=?", o.ID),
	)

	return IncidentReportAttachments(queryMods...)
}

// Notices retrieves all the notice's Notices with an executor.
func (o *IncidentReport) Notices(mods ...qm.QueryMod) noticeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`notices`.`incident_report_id`=?", o.ID),
	)

	return Notices(queryMods...)
}

// LoadCaseManager allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incidentReportL) LoadCaseManager(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentReport interface{}, mods queries.Applicator) error {
	var slice []*IncidentReport
	var object *IncidentReport

	if singular {
		object = maybeIncidentReport.(*IncidentReport)
	} else {
		slice = *maybeIncidentReport.(*[]*IncidentReport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentReportR{}
		}
		if !queries.IsNil(object.CaseManagerID) {
			args = append(args, object.CaseManagerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentReportR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CaseManagerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CaseManagerID) {
				args = append(args, obj.CaseManagerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CaseManager = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.CaseManagerIncidentReports = append(foreign.R.CaseManagerIncidentReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CaseManagerID, foreign.ID) {
				local.R.CaseManager = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.CaseManagerIncidentReports = append(foreign.R.CaseManagerIncidentReports, local)
				break
			}
		}
	}

	return nil
}

// LoadEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incidentReportL) LoadEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentReport interface{}, mods queries.Applicator) error {
	var slice []*IncidentReport
	var object *IncidentReport

	if singular {
		object = maybeIncidentReport.(*IncidentReport)
	} else {
		slice = *maybeIncidentReport.(*[]*IncidentReport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentReportR{}
		}
		args = append(args, object.EmployeeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentReportR{}
			}

			for _, a := range args {
				if a == obj.EmployeeID {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Employee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.IncidentReports = append(foreign.R.IncidentReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmployeeID == foreign.ID {
				local.R.Employee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.IncidentReports = append(foreign.R.IncidentReports, local)
				break
			}
		}
	}

	return nil
}

// LoadLineManager allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incidentReportL) LoadLineManager(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentReport interface{}, mods queries.Applicator) error {
	var slice []*IncidentReport
	var object *IncidentReport

	if singular {
		object = maybeIncidentReport.(*IncidentReport)
	} else {
		slice = *maybeIncidentReport.(*[]*IncidentReport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentReportR{}
		}
		if !queries.IsNil(object.LineManagerID) {
			args = append(args, object.LineManagerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentReportR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LineManagerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LineManagerID) {
				args = append(args, obj.LineManagerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LineManager = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.LineManagerIncidentReports = append(foreign.R.LineManagerIncidentReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LineManagerID, foreign.ID) {
				local.R.LineManager = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.LineManagerIncidentReports = append(foreign.R.LineManagerIncidentReports, local)
				break
			}
		}
	}

	return nil
}

// LoadCaseStatuses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (incidentReportL) LoadCaseStatuses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentReport interface{}, mods queries.Applicator) error {
	var slice []*IncidentReport
	var object *IncidentReport

	if singular {
		object = maybeIncidentReport.(*IncidentReport)
	} else {
		slice = *maybeIncidentReport.(*[]*IncidentReport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentReportR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentReportR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`case_status`),
		qm.WhereIn(`case_status.incident_report_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load case_status")
	}

	var resultSlice []*CaseStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice case_status")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on case_status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for case_status")
	}

	if singular {
		object.R.CaseStatuses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &caseStatusR{}
			}
			foreign.R.IncidentReport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IncidentReportID {
				local.R.CaseStatuses = append(local.R.CaseStatuses, foreign)
				if foreign.R == nil {
					foreign.R = &caseStatusR{}
				}
				foreign.R.IncidentReport = local
				break
			}
		}
	}

	return nil
}

// LoadIncidentReportAttachments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (incidentReportL) LoadIncidentReportAttachments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentReport interface{}, mods queries.Applicator) error {
	var slice []*IncidentReport
	var object *IncidentReport

	if singular {
		object = maybeIncidentReport.(*IncidentReport)
	} else {
		slice = *maybeIncidentReport.(*[]*IncidentReport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentReportR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentReportR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`incident_report_attachments`),
		qm.WhereIn(`incident_report_attachments.incident_report_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load incident_report_attachments")
	}

	var resultSlice []*IncidentReportAttachment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice incident_report_attachments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on incident_report_attachments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incident_report_attachments")
	}

	if singular {
		object.R.IncidentReportAttachments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &incidentReportAttachmentR{}
			}
			foreign.R.IncidentReport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IncidentReportID {
				local.R.IncidentReportAttachments = append(local.R.IncidentReportAttachments, foreign)
				if foreign.R == nil {
					foreign.R = &incidentReportAttachmentR{}
				}
				foreign.R.IncidentReport = local
				break
			}
		}
	}

	return nil
}

// LoadNotices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (incidentReportL) LoadNotices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentReport interface{}, mods queries.Applicator) error {
	var slice []*IncidentReport
	var object *IncidentReport

	if singular {
		object = maybeIncidentReport.(*IncidentReport)
	} else {
		slice = *maybeIncidentReport.(*[]*IncidentReport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentReportR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentReportR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notices`),
		qm.WhereIn(`notices.incident_report_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notices")
	}

	var resultSlice []*Notice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notices")
	}

	if singular {
		object.R.Notices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &noticeR{}
			}
			foreign.R.IncidentReport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IncidentReportID {
				local.R.Notices = append(local.R.Notices, foreign)
				if foreign.R == nil {
					foreign.R = &noticeR{}
				}
				foreign.R.IncidentReport = local
				break
			}
		}
	}

	return nil
}

// SetCaseManager of the incidentReport to the related item.
// Sets o.R.CaseManager to related.
// Adds o to related.R.CaseManagerIncidentReports.
func (o *IncidentReport) SetCaseManager(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `incident_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"case_manager_id"}),
		strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CaseManagerID, related.ID)
	if o.R == nil {
		o.R = &incidentReportR{
			CaseManager: related,
		}
	} else {
		o.R.CaseManager = related
	}

	if related.R == nil {
		related.R = &employeeR{
			CaseManagerIncidentReports: IncidentReportSlice{o},
		}
	} else {
		related.R.CaseManagerIncidentReports = append(related.R.CaseManagerIncidentReports, o)
	}

	return nil
}

// RemoveCaseManager relationship.
// Sets o.R.CaseManager to nil.
// Removes o from all passed in related items' relationships struct.
func (o *IncidentReport) RemoveCaseManager(ctx context.Context, exec boil.ContextExecutor, related *Employee) error {
	var err error

	queries.SetScanner(&o.CaseManagerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("case_manager_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CaseManager = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CaseManagerIncidentReports {
		if queries.Equal(o.CaseManagerID, ri.CaseManagerID) {
			continue
		}

		ln := len(related.R.CaseManagerIncidentReports)
		if ln > 1 && i < ln-1 {
			related.R.CaseManagerIncidentReports[i] = related.R.CaseManagerIncidentReports[ln-1]
		}
		related.R.CaseManagerIncidentReports = related.R.CaseManagerIncidentReports[:ln-1]
		break
	}
	return nil
}

// SetEmployee of the incidentReport to the related item.
// Sets o.R.Employee to related.
// Adds o to related.R.IncidentReports.
func (o *IncidentReport) SetEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `incident_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"employee_id"}),
		strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmployeeID = related.ID
	if o.R == nil {
		o.R = &incidentReportR{
			Employee: related,
		}
	} else {
		o.R.Employee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			IncidentReports: IncidentReportSlice{o},
		}
	} else {
		related.R.IncidentReports = append(related.R.IncidentReports, o)
	}

	return nil
}

// SetLineManager of the incidentReport to the related item.
// Sets o.R.LineManager to related.
// Adds o to related.R.LineManagerIncidentReports.
func (o *IncidentReport) SetLineManager(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `incident_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"line_manager_id"}),
		strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LineManagerID, related.ID)
	if o.R == nil {
		o.R = &incidentReportR{
			LineManager: related,
		}
	} else {
		o.R.LineManager = related
	}

	if related.R == nil {
		related.R = &employeeR{
			LineManagerIncidentReports: IncidentReportSlice{o},
		}
	} else {
		related.R.LineManagerIncidentReports = append(related.R.LineManagerIncidentReports, o)
	}

	return nil
}

// RemoveLineManager relationship.
// Sets o.R.LineManager to nil.
// Removes o from all passed in related items' relationships struct.
func (o *IncidentReport) RemoveLineManager(ctx context.Context, exec boil.ContextExecutor, related *Employee) error {
	var err error

	queries.SetScanner(&o.LineManagerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("line_manager_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LineManager = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LineManagerIncidentReports {
		if queries.Equal(o.LineManagerID, ri.LineManagerID) {
			continue
		}

		ln := len(related.R.LineManagerIncidentReports)
		if ln > 1 && i < ln-1 {
			related.R.LineManagerIncidentReports[i] = related.R.LineManagerIncidentReports[ln-1]
		}
		related.R.LineManagerIncidentReports = related.R.LineManagerIncidentReports[:ln-1]
		break
	}
	return nil
}

// AddCaseStatuses adds the given related objects to the existing relationships
// of the incident_report, optionally inserting them as new records.
// Appends related to o.R.CaseStatuses.
// Sets related.R.IncidentReport appropriately.
func (o *IncidentReport) AddCaseStatuses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaseStatus) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IncidentReportID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `case_status` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"incident_report_id"}),
				strmangle.WhereClause("`", "`", 0, caseStatusPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IncidentReportID = o.ID
		}
	}

	if o.R == nil {
		o.R = &incidentReportR{
			CaseStatuses: related,
		}
	} else {
		o.R.CaseStatuses = append(o.R.CaseStatuses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &caseStatusR{
				IncidentReport: o,
			}
		} else {
			rel.R.IncidentReport = o
		}
	}
	return nil
}

// AddIncidentReportAttachments adds the given related objects to the existing relationships
// of the incident_report, optionally inserting them as new records.
// Appends related to o.R.IncidentReportAttachments.
// Sets related.R.IncidentReport appropriately.
func (o *IncidentReport) AddIncidentReportAttachments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncidentReportAttachment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IncidentReportID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `incident_report_attachments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"incident_report_id"}),
				strmangle.WhereClause("`", "`", 0, incidentReportAttachmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IncidentReportID = o.ID
		}
	}

	if o.R == nil {
		o.R = &incidentReportR{
			IncidentReportAttachments: related,
		}
	} else {
		o.R.IncidentReportAttachments = append(o.R.IncidentReportAttachments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incidentReportAttachmentR{
				IncidentReport: o,
			}
		} else {
			rel.R.IncidentReport = o
		}
	}
	return nil
}

// AddNotices adds the given related objects to the existing relationships
// of the incident_report, optionally inserting them as new records.
// Appends related to o.R.Notices.
// Sets related.R.IncidentReport appropriately.
func (o *IncidentReport) AddNotices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IncidentReportID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `notices` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"incident_report_id"}),
				strmangle.WhereClause("`", "`", 0, noticePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IncidentReportID = o.ID
		}
	}

	if o.R == nil {
		o.R = &incidentReportR{
			Notices: related,
		}
	} else {
		o.R.Notices = append(o.R.Notices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &noticeR{
				IncidentReport: o,
			}
		} else {
			rel.R.IncidentReport = o
		}
	}
	return nil
}

// IncidentReports retrieves all the records using an executor.
func IncidentReports(mods ...qm.QueryMod) incidentReportQuery {
	mods = append(mods, qm.From("`incident_reports`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`incident_reports`.*"})
	}

	return incidentReportQuery{q}
}

// FindIncidentReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIncidentReport(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IncidentReport, error) {
	incidentReportObj := &IncidentReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `incident_reports` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, incidentReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from incident_reports")
	}

	return incidentReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IncidentReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no incident_reports provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(incidentReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	incidentReportInsertCacheMut.RLock()
	cache, cached := incidentReportInsertCache[key]
	incidentReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			incidentReportAllColumns,
			incidentReportColumnsWithDefault,
			incidentReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(incidentReportType, incidentReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(incidentReportType, incidentReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `incident_reports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `incident_reports` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `incident_reports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into incident_reports")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == incidentReportMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for incident_reports")
	}

CacheNoHooks:
	if !cached {
		incidentReportInsertCacheMut.Lock()
		incidentReportInsertCache[key] = cache
		incidentReportInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the IncidentReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IncidentReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	incidentReportUpdateCacheMut.RLock()
	cache, cached := incidentReportUpdateCache[key]
	incidentReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			incidentReportAllColumns,
			incidentReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update incident_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `incident_reports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, incidentReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(incidentReportType, incidentReportMapping, append(wl, incidentReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update incident_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for incident_reports")
	}

	if !cached {
		incidentReportUpdateCacheMut.Lock()
		incidentReportUpdateCache[key] = cache
		incidentReportUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q incidentReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for incident_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for incident_reports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IncidentReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incidentReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `incident_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, incidentReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in incidentReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all incidentReport")
	}
	return rowsAff, nil
}

var mySQLIncidentReportUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IncidentReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no incident_reports provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(incidentReportColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLIncidentReportUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	incidentReportUpsertCacheMut.RLock()
	cache, cached := incidentReportUpsertCache[key]
	incidentReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			incidentReportAllColumns,
			incidentReportColumnsWithDefault,
			incidentReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			incidentReportAllColumns,
			incidentReportPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert incident_reports, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`incident_reports`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `incident_reports` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(incidentReportType, incidentReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(incidentReportType, incidentReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for incident_reports")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == incidentReportMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(incidentReportType, incidentReportMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for incident_reports")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for incident_reports")
	}

CacheNoHooks:
	if !cached {
		incidentReportUpsertCacheMut.Lock()
		incidentReportUpsertCache[key] = cache
		incidentReportUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single IncidentReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IncidentReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IncidentReport provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), incidentReportPrimaryKeyMapping)
	sql := "DELETE FROM `incident_reports` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from incident_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for incident_reports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q incidentReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no incidentReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incident_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for incident_reports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IncidentReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incidentReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `incident_reports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, incidentReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incidentReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for incident_reports")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IncidentReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIncidentReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncidentReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IncidentReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incidentReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `incident_reports`.* FROM `incident_reports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, incidentReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IncidentReportSlice")
	}

	*o = slice

	return nil
}

// IncidentReportExists checks if the IncidentReport row exists.
func IncidentReportExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `incident_reports` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if incident_reports exists")
	}

	return exists, nil
}
